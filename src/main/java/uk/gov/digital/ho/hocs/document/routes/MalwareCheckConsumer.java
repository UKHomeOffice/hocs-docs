package uk.gov.digital.ho.hocs.document.routes;

import lombok.extern.slf4j.Slf4j;
import org.apache.camel.Exchange;
import org.apache.camel.LoggingLevel;
import org.apache.camel.Predicate;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.aws.sqs.SqsConstants;
import org.apache.camel.component.http4.HttpComponent;
import org.apache.camel.util.jsse.KeyManagersParameters;
import org.apache.camel.util.jsse.KeyStoreParameters;
import org.apache.camel.util.jsse.SSLContextParameters;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import uk.gov.digital.ho.hocs.document.exception.ApplicationExceptions;
import uk.gov.digital.ho.hocs.document.HttpProcessors;
import uk.gov.digital.ho.hocs.document.aws.S3DocumentService;

import uk.gov.digital.ho.hocs.document.dto.DocumentCopyRequest;
import uk.gov.digital.ho.hocs.document.model.DocumentStatus;

@Component
@Slf4j
public class MalwareCheckConsumer extends RouteBuilder {


    private String dlq;
    private final int maximumRedeliveries;
    private final int redeliveryDelay;
    private final int backOffMultiplier;
    private final String clamAvPath;
    private S3DocumentService s3BucketService;
    private final String documentServiceQueueName;
    private final String toQueue;

    @Autowired
    public MalwareCheckConsumer(
            S3DocumentService s3BucketService,
            @Value("${clamav.path}") String clamAvPath,
            @Value("${docs.queue.dlq}") String dlq,
            @Value("${docs.queue.maximumRedeliveries}") int maximumRedeliveries,
            @Value("${docs.queue.redeliveryDelay}") int redeliveryDelay,
            @Value("${docs.queue.backOffMultiplier}") int backOffMultiplier,
            @Value("${conversionQueueName}") String toQueue,
            @Value("${documentServiceQueueName}") String documentServiceQueueName) {
        this.s3BucketService = s3BucketService;
        this.clamAvPath = String.format("%s?throwExceptionOnFailure=false&useSystemProperties=true", clamAvPath);
        this.dlq = dlq;
        this.maximumRedeliveries = maximumRedeliveries;
        this.redeliveryDelay = redeliveryDelay;
        this.backOffMultiplier = backOffMultiplier;
        this.documentServiceQueueName = documentServiceQueueName;
        this.toQueue = toQueue;


    }

    @Override
    public void configure() {

        if(clamAvPath.startsWith("https")) {
            KeyStoreParameters ksp = new KeyStoreParameters();
            ksp.setResource("/etc/keystore/truststore.jks");
            ksp.setPassword("changeit");

            KeyManagersParameters kmp = new KeyManagersParameters();
            kmp.setKeyStore(ksp);
            kmp.setKeyPassword("changeit");

            SSLContextParameters scp = new SSLContextParameters();
            scp.setKeyManagers(kmp);

            HttpComponent httpComponent = getContext().getComponent("https4", HttpComponent.class);
            httpComponent.setSslContextParameters(scp);
        }

        errorHandler(deadLetterChannel(dlq)
                .loggingLevel(LoggingLevel.ERROR)
                .retryAttemptedLogLevel(LoggingLevel.WARN)
                .useOriginalMessage()
                .log("Failed to malware check document")
                .maximumRedeliveries(maximumRedeliveries)
                .redeliveryDelay(redeliveryDelay)
                .backOffMultiplier(backOffMultiplier)
                .asyncDelayedRedelivery()
                .logRetryStackTrace(true)
                .onPrepareFailure(exchange -> {
                    exchange.getIn().setHeader("FailureMessage", exchange.getProperty(Exchange.EXCEPTION_CAUGHT,
                            Exception.class).getMessage());
                }));

        this.getContext().setStreamCaching(true);

        from("direct:malwarecheck").routeId("malware-queue")
                .log(LoggingLevel.INFO, "Retrieving document from S3")
                .setProperty("caseUUID", simple("${body.caseUUID}"))
                .bean(s3BucketService, "getFileFromUntrustedS3(${body.fileLink})")
                .setProperty("fileType", simple("${body.fileType}"))
                .setProperty("filename", simple("${body.filename}"))
                .log(LoggingLevel.INFO, "Calling Clam AV service")
                .process(HttpProcessors.buildMultipartEntity())
                .to("direct:scan");

        from("direct:scan").routeId("malware-scan-queue")
                .errorHandler(noErrorHandler())
                .to(clamAvPath)
                .log(LoggingLevel.INFO, "Clam AV Response: ${body}")
                .choice()
                .when(validMalwareResponse)
                    .log(LoggingLevel.INFO, "Clam AV check complete")
                    .process(generateDocumentCopyRequest())
                    .bean(s3BucketService, "copyToTrustedBucket")
                    .to(toQueue)
                .otherwise()
                .when(HttpProcessors.validateHttpResponse)
                    .log(LoggingLevel.WARN, "Malware found")
                    .setProperty("status", simple(DocumentStatus.FAILED_VIRUS.toString()))
                    .to(documentServiceQueueName)
                .otherwise()
                    .throwException(new ApplicationExceptions.MalwareCheckException("Document failed malware check"))
                    .setHeader(SqsConstants.RECEIPT_HANDLE, exchangeProperty(SqsConstants.RECEIPT_HANDLE));
    }

    private Processor generateDocumentCopyRequest() {
        return exchange -> {
            String filename = exchange.getProperty("filename").toString();
            String caseUUID = exchange.getProperty("caseUUID").toString();
            String fileType = exchange.getProperty("fileType").toString();
            exchange.getOut().setBody(new DocumentCopyRequest(filename, caseUUID, fileType));
        };
    }

    private Predicate validMalwareResponse = bodyAs(String.class).contains("Everything ok : true");

}
