package uk.gov.digital.ho.hocs.document.routes;

import lombok.extern.slf4j.Slf4j;
import org.apache.camel.Exchange;
import org.apache.camel.LoggingLevel;
import org.apache.camel.Predicate;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.aws.sqs.SqsConstants;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import uk.gov.digital.ho.hocs.document.application.LogEvent;
import uk.gov.digital.ho.hocs.document.dto.camel.DocumentConversionRequest;
import uk.gov.digital.ho.hocs.document.dto.camel.S3Document;
import uk.gov.digital.ho.hocs.document.dto.camel.UpdateDocumentRequest;
import uk.gov.digital.ho.hocs.document.exception.ApplicationExceptions;
import uk.gov.digital.ho.hocs.document.HttpProcessors;
import uk.gov.digital.ho.hocs.document.aws.S3DocumentService;

import uk.gov.digital.ho.hocs.document.dto.camel.DocumentCopyRequest;
import uk.gov.digital.ho.hocs.document.model.DocumentStatus;

import java.util.UUID;

@Component
@Slf4j
public class MalwareCheckConsumer extends RouteBuilder {


    private String dlq;
    private final int maximumRedeliveries;
    private final int redeliveryDelay;
    private final int backOffMultiplier;
    private final String clamAvPath;
    private S3DocumentService s3BucketService;
    private final String documentServiceQueueName;
    private final String toQueue;

    @Autowired
    public MalwareCheckConsumer(
            S3DocumentService s3BucketService,
            @Value("${clamav.path}") String clamAvPath,
            @Value("${docs.queue.dlq}") String dlq,
            @Value("${docs.queue.malware.maximumRedeliveries}") int maximumRedeliveries,
            @Value("${docs.queue.redeliveryDelay}") int redeliveryDelay,
            @Value("${docs.queue.backOffMultiplier}") int backOffMultiplier,
            @Value("${conversionQueueName}") String toQueue,
            @Value("${documentServiceQueueName}") String documentServiceQueueName) {
        this.s3BucketService = s3BucketService;
        this.clamAvPath = String.format("%s?throwExceptionOnFailure=false&useSystemProperties=true", clamAvPath);
        this.dlq = dlq;
        this.maximumRedeliveries = maximumRedeliveries;
        this.redeliveryDelay = redeliveryDelay;
        this.backOffMultiplier = backOffMultiplier;
        this.documentServiceQueueName = documentServiceQueueName;
        this.toQueue = toQueue;


    }

    @Override
    public void configure() {

        errorHandler(deadLetterChannel(dlq)
                .loggingLevel(LoggingLevel.ERROR)
                .retryAttemptedLogLevel(LoggingLevel.WARN)
                .useOriginalMessage()
                .log("Failed to malware check document")
                .maximumRedeliveries(maximumRedeliveries)
                .redeliveryDelay(redeliveryDelay)
                .backOffMultiplier(backOffMultiplier)
                .asyncDelayedRedelivery()
                .logRetryStackTrace(false)
                .onPrepareFailure(exchange -> {
                    exchange.getIn().setHeader("failureMessage", exchange.getProperty(Exchange.EXCEPTION_CAUGHT,
                            Exception.class).getMessage());
                    exchange.getIn().setHeader(SqsConstants.RECEIPT_HANDLE, exchangeProperty(SqsConstants.RECEIPT_HANDLE));
                }));


        from("direct:malwarecheck").routeId("malware-queue")
                .log(LoggingLevel.DEBUG, "Retrieving document from S3")
                .setProperty("uuid", simple("${body.documentUUID}"))
                .setProperty("externalReferenceUUID", simple("${body.externalReferenceUUID}"))
                .bean(s3BucketService, "getFileFromUntrustedS3(${body.fileLink})")
                .setProperty("fileType", simple("${body.fileType}"))
                .setProperty("filename", simple("${body.filename}"))
                .setProperty("originalFilename", simple("${body.originalFilename}"))
                .log(LoggingLevel.INFO, "Calling Clam AV service")
                .process(HttpProcessors.buildMultipartEntity())
                .to("direct:scan");

        from("direct:scan").routeId("malware-scan-queue")
                .errorHandler(noErrorHandler())
                .to(clamAvPath)
                .log(LoggingLevel.INFO, "Clam AV Response: ${body}")
                .choice()
                .when(validMalwareResponse)
                    .log(LoggingLevel.INFO, "Clam AV check completed successfully")
                    .process(generateDocumentCopyRequest())
                    .bean(s3BucketService, "copyToTrustedBucket")
                    .process(generateDocumentConversionRequest())
                    .to(toQueue)
                .otherwise()
                .when(HttpProcessors.validateHttpResponse)
                    .log(LoggingLevel.WARN, "Malware found")
                    .setProperty("status", simple(DocumentStatus.FAILED_VIRUS.toString()))
                    .process(generateDocumentUpdateRequest())
                    .to(documentServiceQueueName)
                .otherwise()
                    .throwException(new ApplicationExceptions.MalwareCheckException("Malware check failed", LogEvent.DOCUMENT_VIRUS_SCAN_FAILURE))
                    .setHeader(SqsConstants.RECEIPT_HANDLE, exchangeProperty(SqsConstants.RECEIPT_HANDLE));
    }

    private Processor generateDocumentCopyRequest() {
        return exchange -> {
            String filename = exchange.getProperty("filename").toString();
            String externalReferenceUUID = exchange.getProperty("externalReferenceUUID").toString();
            String fileType = exchange.getProperty("fileType").toString();
            exchange.getOut().setBody(new DocumentCopyRequest(filename, externalReferenceUUID, fileType));
        };
    }

    private Processor generateDocumentConversionRequest() {
        return exchange -> {
            S3Document document = exchange.getIn().getBody(S3Document.class);
            UUID documentUUID = UUID.fromString(exchange.getProperty("uuid").toString());
            String externalReferenceUUID = exchange.getProperty("externalReferenceUUID").toString();
            exchange.getOut().setBody(new DocumentConversionRequest(documentUUID, document.getFilename(),externalReferenceUUID  ,document.getFileType()));
        };
    }


    private Processor generateDocumentUpdateRequest() {
        return exchange -> {
            UUID documentUUID = UUID.fromString(exchange.getProperty("uuid").toString());
            DocumentStatus status = DocumentStatus.valueOf(exchange.getProperty("status").toString());
            exchange.getOut().setBody(new UpdateDocumentRequest(documentUUID, status, "" ,""));
        };
    }

    private Predicate validMalwareResponse = bodyAs(String.class).contains("Everything ok : true");

}
