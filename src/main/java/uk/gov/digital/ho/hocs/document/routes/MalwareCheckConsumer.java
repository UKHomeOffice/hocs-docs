package uk.gov.digital.ho.hocs.document.routes;

import lombok.extern.slf4j.Slf4j;
import org.apache.camel.LoggingLevel;
import org.apache.camel.Predicate;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.aws.sqs.SqsConstants;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import uk.gov.digital.ho.hocs.document.DocumentDataService;
import uk.gov.digital.ho.hocs.document.application.LogEvent;
import uk.gov.digital.ho.hocs.document.dto.camel.DocumentConversionRequest;
import uk.gov.digital.ho.hocs.document.dto.camel.S3Document;
import uk.gov.digital.ho.hocs.document.exception.ApplicationExceptions;
import uk.gov.digital.ho.hocs.document.HttpProcessors;
import uk.gov.digital.ho.hocs.document.aws.S3DocumentService;
import uk.gov.digital.ho.hocs.document.dto.camel.DocumentCopyRequest;
import uk.gov.digital.ho.hocs.document.model.DocumentStatus;

import java.util.UUID;

import static uk.gov.digital.ho.hocs.document.application.RequestData.transferHeadersToMDC;
import static uk.gov.digital.ho.hocs.document.application.RequestData.transferMDCToHeaders;

@Component
@Slf4j
public class MalwareCheckConsumer extends RouteBuilder {

    private final String clamAvPath;

    private S3DocumentService s3BucketService;

    private String malwareQueue;

    private String scanProducer;

    private String scanConsumer;

    private DocumentDataService documentDataService;

    private final String toQueue;

    private static final String EXTERNAL_REFERENCE_UUID = "externalReferenceUUID";

    private static final String CONVERT_TO = "convertTo";

    public MalwareCheckConsumer(S3DocumentService s3BucketService,
                                @Value("${clamav.path}") String clamAvPath,
                                @Value("${docs.conversion.producer}") String toQueue,
                                @Value("${docs.malware.consumer}") String malwareQueue,
                                @Value("${docs.scan.producer}") String scanProducer,
                                @Value("${docs.scan.consumer}") String scanConsumer,

                               DocumentDataService documentDataService) {
        this.s3BucketService = s3BucketService;
        this.clamAvPath = String.format("%s?throwExceptionOnFailure=false&useSystemProperties=true", clamAvPath);
        this.toQueue = toQueue;
        this.malwareQueue = malwareQueue;
        this.scanProducer = scanProducer;
        this.scanConsumer = scanConsumer;
        this.documentDataService = documentDataService;
    }

    @Override
    public void configure() {

        errorHandler(deadLetterChannel("log:malware-queue"));

        onException(ApplicationExceptions.MalwareCheckException.class, ApplicationExceptions.S3Exception.class)
            .removeHeader(SqsConstants.RECEIPT_HANDLE)
            .handled(true)
            .process(exchange -> {
                UUID uuid = UUID.fromString(exchange.getProperty("uuid", String.class));
                documentDataService.updateDocument(uuid, DocumentStatus.FAILED_MALWARE_SCAN);
            });


        from(malwareQueue).routeId("malware-queue")
                .process(transferHeadersToMDC())
                .log(LoggingLevel.DEBUG, "Retrieving document from S3")
                .setProperty("uuid", simple("${body.documentUUID}"))
                .setProperty(EXTERNAL_REFERENCE_UUID, simple("${body.externalReferenceUUID}"))
                .setProperty(CONVERT_TO, simple("${body.convertTo}"))
                .bean(s3BucketService, "getFileFromUntrustedS3(${body.fileLink})")
                .setProperty("fileType", simple("${body.fileType}"))
                .setProperty("filename", simple("${body.filename}"))
                .setProperty("originalFilename", simple("${body.originalFilename}"))
                .log(LoggingLevel.INFO, "Calling Clam AV service")
                .process(HttpProcessors.buildMultipartEntity())
                .process(transferMDCToHeaders())
                .to(scanProducer);

        from(scanConsumer).routeId("malware-scan-queue")
                .process(transferHeadersToMDC())
                .to(clamAvPath)
                .log(LoggingLevel.DEBUG, "Clam AV Response: ${body}")
                .choice()
                .when(validMalwareResponse)
                    .process(generateDocumentCopyRequest())
                    .bean(s3BucketService, "copyToTrustedBucket")
                    .process(generateDocumentConversionRequest())
                    .process(transferMDCToHeaders())
                    .setHeader(SqsConstants.RECEIPT_HANDLE, exchangeProperty(SqsConstants.RECEIPT_HANDLE))
                    .process(exchange -> {
                        UUID uuid = UUID.fromString(exchange.getProperty("uuid", String.class));
                        documentDataService.updateDocument(uuid, DocumentStatus.AWAITING_CONVERSION);
                    })
                    .to(toQueue)
                    .endChoice()
                .otherwise()
                .when(HttpProcessors.validateHttpResponse)
                    .log(LoggingLevel.WARN, "Malware found")
                    .process(transferMDCToHeaders())
                    .setHeader(SqsConstants.RECEIPT_HANDLE, exchangeProperty(SqsConstants.RECEIPT_HANDLE))
                    .process(exchange -> {
                        UUID uuid = UUID.fromString(exchange.getProperty("uuid", String.class));
                        documentDataService.updateDocument(uuid, DocumentStatus.FAILED_VIRUS);
                    })
                    .endChoice()
                .otherwise()
                    .log(LoggingLevel.ERROR, "Malware check failed, response: ${body}")
                    .throwException(new ApplicationExceptions.MalwareCheckException("Malware check failed", LogEvent.DOCUMENT_VIRUS_SCAN_FAILURE))
                    .endChoice();
    }

    private Processor generateDocumentCopyRequest() {
        return exchange -> {
            String filename = exchange.getProperty("filename").toString();
            String externalReferenceUUID = exchange.getProperty(EXTERNAL_REFERENCE_UUID).toString();
            String fileType = exchange.getProperty("fileType").toString();
            String convertTo = exchange.getProperty(CONVERT_TO).toString();
            exchange.getMessage().setBody(new DocumentCopyRequest(filename, externalReferenceUUID, fileType, convertTo));
        };
    }

    private Processor generateDocumentConversionRequest() {
        return exchange -> {
            S3Document document = exchange.getIn().getBody(S3Document.class);
            UUID documentUUID = UUID.fromString(exchange.getProperty("uuid").toString());
            String externalReferenceUUID = exchange.getProperty(EXTERNAL_REFERENCE_UUID).toString();
            String convertTo = exchange.getProperty(CONVERT_TO).toString();
            exchange.getMessage().setBody(
                new DocumentConversionRequest(documentUUID, document.getFilename(), externalReferenceUUID,
                    document.getFileType(), convertTo));
        };
    }

    private Predicate validMalwareResponse = bodyAs(String.class).contains("Everything ok : true");

}
