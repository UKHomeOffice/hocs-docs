package uk.gov.digital.ho.hocs.document.routes;

import org.apache.camel.Exchange;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import uk.gov.digital.ho.hocs.document.DocumentDataService;
import uk.gov.digital.ho.hocs.document.application.LogEvent;
import uk.gov.digital.ho.hocs.document.aws.S3DocumentService;
import uk.gov.digital.ho.hocs.document.dto.camel.DocumentCopyRequest;
import uk.gov.digital.ho.hocs.document.dto.camel.DocumentMalwareRequest;
import uk.gov.digital.ho.hocs.document.dto.camel.S3Document;
import uk.gov.digital.ho.hocs.document.exception.ApplicationExceptions;
import uk.gov.digital.ho.hocs.document.model.DocumentStatus;

import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.UUID;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DocumentMalwareCheckConsumerTest extends CamelTestSupport {

    @Mock
    S3DocumentService s3BucketService;

    @Mock
    DocumentDataService documentDataService;

    private final String endpoint = "direct:malwarecheck";

    private final String toEndpoint = "mock:document-conversion";

    private final String calmAVService = "mock:malware-service";

    private final String scanQueue = "direct:scan";

    private DocumentMalwareRequest request = new DocumentMalwareRequest(UUID.randomUUID(), "someuuid",
        UUID.randomUUID(), "PDF");

    @Override
    protected RouteBuilder createRouteBuilder() {
        return new MalwareCheckConsumer(s3BucketService, calmAVService, toEndpoint, endpoint,scanQueue, scanQueue, documentDataService);
    }

    @Test
    public void shouldCallS3GetDocument() throws Exception {
        when(s3BucketService.getFileFromUntrustedS3(any())).thenReturn(getTestDocument());
        template.sendBody(endpoint, request);
        verify(s3BucketService).getFileFromUntrustedS3("someuuid");
    }

    @Test
    public void shouldCallS3CopyDocumentAfterSuccessfulMalwareScan() throws Exception {
        S3Document document = getTestDocument();
        when(s3BucketService.getFileFromUntrustedS3(any())).thenReturn(document);
        when(s3BucketService.copyToTrustedBucket(any())).thenReturn(getCopiedS3Document());
        MockEndpoint mockMalwareService = mockMalwareService();
        template.sendBody(endpoint, request);
        mockMalwareService.assertIsSatisfied();
        verify(s3BucketService).copyToTrustedBucket(any(DocumentCopyRequest.class));
    }

    @Test
    public void shouldAddPropertiesToExchange() throws Exception {
        S3Document document = getTestDocument();
        when(s3BucketService.getFileFromUntrustedS3(any())).thenReturn(document);
        MockEndpoint mockEndpoint = getMockEndpoint(toEndpoint);
        mockEndpoint.expectedPropertyReceived("externalReferenceUUID", "someExternalReferenceUUID");
        mockEndpoint.expectedPropertyReceived("fileType", "docx");
        mockEndpoint.expectedPropertyReceived("filename", "UUID");
        mockEndpoint.expectedPropertyReceived("originalFilename", "sample.docx");

        template.sendBody(endpoint, request);
        mockEndpoint.assertIsSatisfied();
    }

    @Test
    public void shouldAddDocumentToConversionQueueOnSuccess() throws Exception {
        S3Document document = getTestDocument();
        when(s3BucketService.getFileFromUntrustedS3(any())).thenReturn(document);
        when(s3BucketService.copyToTrustedBucket(any())).thenReturn(getCopiedS3Document());
        MockEndpoint mockMalwareService = mockMalwareService();
        getMockEndpoint(toEndpoint).expectedMessageCount(1);

        template.sendBody(endpoint, request);

        getMockEndpoint(toEndpoint).assertIsSatisfied();
        mockMalwareService.assertIsSatisfied();
    }

    @Test
    public void shouldUpdateStatusToAwaitingConversionOnSuccess() throws Exception {
        S3Document document = getTestDocument();
        when(s3BucketService.getFileFromUntrustedS3(any())).thenReturn(document);
        when(s3BucketService.copyToTrustedBucket(any())).thenReturn(getCopiedS3Document());
        doNothing().when(documentDataService).updateDocument(any(), eq(DocumentStatus.AWAITING_CONVERSION));

        MockEndpoint mockMalwareService = mockMalwareService();
        getMockEndpoint(toEndpoint).expectedMessageCount(1);

        template.sendBody(endpoint, request);

        getMockEndpoint(toEndpoint).assertIsSatisfied();
        mockMalwareService.assertIsSatisfied();
        verify(documentDataService, times(1)).updateDocument(any(), eq(DocumentStatus.AWAITING_CONVERSION));
    }

    @Test
    public void shouldNotCallMalwareServiceOnGetS3FileError() throws Exception {
        when(s3BucketService.getFileFromUntrustedS3(any())).thenThrow(new ApplicationExceptions.S3Exception(null, LogEvent.S3_DOWNLOAD_FAILURE,new IOException()));
        MockEndpoint mockMalwareService = mockMalwareService();
        getMockEndpoint(toEndpoint).expectedMessageCount(0);
        template.sendBody(endpoint, request);
        getMockEndpoint(toEndpoint).assertIsSatisfied();
        mockMalwareService.assertIsNotSatisfied();
    }

    @Test
    public void shouldNotCallMalwareServiceOnCopyS3FileError() throws Exception {
        S3Document document = getTestDocument();
        when(s3BucketService.getFileFromUntrustedS3(any())).thenReturn(document);
        when(s3BucketService.copyToTrustedBucket(any())).thenThrow(new ApplicationExceptions.S3Exception(null, LogEvent.S3_TRUSTED_COPY_FAILURE, new IOException()));
        MockEndpoint mockMalwareService = mockMalwareService();
        getMockEndpoint(toEndpoint).expectedMessageCount(0);
        template.sendBody(endpoint, request);
        getMockEndpoint(toEndpoint).assertIsSatisfied();
        mockMalwareService.assertIsSatisfied();
    }

    @Test
    public void shouldUpdateDocumentStatusWhenMalwareCheckFails() throws Exception {
        S3Document document = getTestDocument();
        when(s3BucketService.getFileFromUntrustedS3(any())).thenReturn(document);
        doNothing().when(documentDataService).updateDocument(any(), eq(DocumentStatus.FAILED_MALWARE_SCAN));

        MockEndpoint mockMalwareService = mockErrorMalwareService();
        template.sendBody(endpoint, request);
        mockMalwareService.assertIsSatisfied();

        verify(documentDataService, times(1)).updateDocument(any(), eq(DocumentStatus.FAILED_MALWARE_SCAN));
    }

    @Test
    public void shouldUpdateDocumentStatusWhenMalwareFound() throws Exception {
        S3Document document = getTestDocument();
        when(s3BucketService.getFileFromUntrustedS3(any())).thenReturn(document);
        doNothing().when(documentDataService).updateDocument(any(), eq(DocumentStatus.FAILED_VIRUS));

        MockEndpoint mockMalwareService = mockCheckFailedMalwareService();
        template.sendBody(endpoint, request);
        mockMalwareService.assertIsSatisfied();

        verify(documentDataService, times(1)).updateDocument(any(), eq(DocumentStatus.FAILED_VIRUS));
    }

    private MockEndpoint mockMalwareService()  {
        MockEndpoint mock = getMockEndpoint(
            "mock:malware-service?throwExceptionOnFailure=false&useSystemProperties=true");
        mock.expectedMessageCount(1);
        mock.whenAnyExchangeReceived(exchange -> {
            exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE, 200);
            exchange.getIn().setBody("Everything ok : true");
        });
        return mock;
    }

    private MockEndpoint mockErrorMalwareService()  {
        MockEndpoint mock = getMockEndpoint(
            "mock:malware-service?throwExceptionOnFailure=false&useSystemProperties=true");
        mock.expectedMessageCount(1);
        mock.whenAnyExchangeReceived(exchange -> {
            exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE, 500);
            exchange.getIn().setBody(null);
        });
        return mock;
    }

    private MockEndpoint mockCheckFailedMalwareService()  {
        MockEndpoint mock = getMockEndpoint(
            "mock:malware-service?throwExceptionOnFailure=false&useSystemProperties=true");
        mock.expectedMessageCount(1);
        mock.whenAnyExchangeReceived(exchange -> {
            exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE, 200);
            exchange.getIn().setBody("Everything ok : false");
        });
        return mock;
    }

    private S3Document getCopiedS3Document() {
        return new S3Document("externalReferenceUUID/UUID", "sample.docx", null, "docx",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
    }

    private S3Document getTestDocument() throws URISyntaxException, IOException {
        byte[] data = Files.readAllBytes(
            Paths.get(this.getClass().getClassLoader().getResource("testdata/sample.docx").toURI()));
        return new S3Document("UUID", "sample.docx", data, "docx",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
    }

}