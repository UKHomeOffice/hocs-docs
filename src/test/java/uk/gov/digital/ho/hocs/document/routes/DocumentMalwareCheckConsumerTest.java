package uk.gov.digital.ho.hocs.document.routes;

import org.apache.camel.Exchange;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import uk.gov.digital.ho.hocs.document.aws.S3DocumentService;
import uk.gov.digital.ho.hocs.document.model.Document;
import uk.gov.digital.ho.hocs.document.dto.DocumentMalwareRequest;

import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class DocumentMalwareCheckConsumerTest extends CamelTestSupport {

    @Mock
    S3DocumentService s3BucketService;

    private final String endpoint = "direct:malwarecheck";
    private final String dlq = "mock:cs-dev-document-sqs-dlq";
    private final String toEndpoint = "mock:document-conversion";
    private final String documentService = "mock:updaterecord";
    private final String calmAVService = "mock:malware-service";

    private DocumentMalwareRequest request = new DocumentMalwareRequest("someuuid", "sample.docx");


    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
      return new MalwareCheckConsumer(s3BucketService, calmAVService, dlq, 0,0,0,toEndpoint, documentService);
    }

    @Test
    public void shouldCallS3GetDocument() throws Exception {
        when(s3BucketService.getFileFromS3(any())).thenReturn(getTestDocument());
        template.sendBody(endpoint, request);
        verify(s3BucketService, times(1)).getFileFromS3("someuuid");
    }

    @Test
    public void shouldAddPropertiesToExchange() throws Exception {
        Document document = getTestDocument();
        when(s3BucketService.getFileFromS3(any())).thenReturn(document);

        MockEndpoint mockEndpoint = getMockEndpoint(toEndpoint);
        mockEndpoint.expectedPropertyReceived("caseUUID", "someuuid");
        mockEndpoint.expectedPropertyReceived("fileType", "docx");
        mockEndpoint.expectedPropertyReceived("filename", "UUID");

        template.sendBody(endpoint, request);
        mockEndpoint.assertIsSatisfied();
    }


    @Test
    public void shouldAddDocumentToConversionQueueOnSuccess() throws Exception {
        Document document = getTestDocument();
        when(s3BucketService.getFileFromS3(any())).thenReturn(document);

        MockEndpoint mockConversionService = mockMalwareService();
        getMockEndpoint(dlq).expectedMessageCount(0);
        getMockEndpoint(toEndpoint).expectedMessageCount(1);

        template.sendBody(endpoint,request);

        getMockEndpoint(toEndpoint).assertIsSatisfied();
        getMockEndpoint(dlq).assertIsSatisfied();
        mockConversionService.assertIsSatisfied();
    }


    @Test
    public void shouldAddMessagetoDLQAndNotCallMalwareServiceOnGetS3FileError() throws Exception {
        when(s3BucketService.getFileFromS3(any())).thenThrow(new IOException());
        MockEndpoint mockMalwareService = mockMalwareService();
        getMockEndpoint(dlq).expectedMessageCount(1);
        template.sendBody(endpoint,request);
        getMockEndpoint(dlq).assertIsSatisfied();
        mockMalwareService.assertIsNotSatisfied();
    }

    @Test
    public void shouldAddMessagetoDLQWhenMalwareServiceFails() throws Exception {
        Document document = getTestDocument();
        when(s3BucketService.getFileFromS3(any())).thenReturn(document);

        MockEndpoint mockMalwareService = mockErrorMalwareService();
        getMockEndpoint(toEndpoint).expectedMessageCount(0);
        getMockEndpoint(dlq).expectedMessageCount(1);

        template.sendBody(endpoint,request);

        getMockEndpoint(dlq).assertIsSatisfied();
        getMockEndpoint(toEndpoint).assertIsSatisfied();
        mockMalwareService.assertIsSatisfied();

    }


    @Test
    public void shouldAddToUpdateRecordQueueWhenMalwareCheckFails() throws Exception {
        Document document = getTestDocument();
        when(s3BucketService.getFileFromS3(any())).thenReturn(document);

        MockEndpoint mockMalwareService = mockCheckFailedMalwareService();
        getMockEndpoint(documentService).expectedMessageCount(1);
        getMockEndpoint(dlq).expectedMessageCount(0);
        template.sendBody(endpoint,request);
        getMockEndpoint(dlq).assertIsSatisfied();
        mockMalwareService.assertIsSatisfied();
        getMockEndpoint(documentService).assertIsSatisfied();
    }


    private MockEndpoint mockMalwareService() throws IOException, URISyntaxException {
        MockEndpoint mock = getMockEndpoint("mock:malware-service?throwExceptionOnFailure=false&&useSystemProperties=true");
        mock.expectedMessageCount(1);
        mock.whenAnyExchangeReceived(exchange -> {
            exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE, 200);
            exchange.getIn().setBody("Everything ok : true");
        });
        return mock;
    }

    private MockEndpoint mockErrorMalwareService() throws IOException, URISyntaxException {
        MockEndpoint mock = getMockEndpoint("mock:malware-service?throwExceptionOnFailure=false");
        mock.expectedMessageCount(1);
        mock.whenAnyExchangeReceived(exchange -> {
            exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE, 400);
            exchange.getIn().setBody(null);
        });
        return mock;
    }

    private MockEndpoint mockCheckFailedMalwareService() throws IOException, URISyntaxException {
        MockEndpoint mock = getMockEndpoint("mock:malware-service?throwExceptionOnFailure=false");
        mock.expectedMessageCount(1);
        mock.whenAnyExchangeReceived(exchange -> {
            exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE, 200);
            exchange.getIn().setBody("Everything ok : false");
        });
        return mock;
    }

    private Document getTestDocument() throws URISyntaxException, IOException {
        byte[] data = Files.readAllBytes(Paths.get(this.getClass().getClassLoader().getResource("testdata/sample.docx").toURI()));
        return new Document("UUID", "sample.docx", data, "docx", "\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"");
    }

}